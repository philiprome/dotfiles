#!/bin/bash
# This script helps to create a custom color preset.

# Exit on error.
set -e

DRIVER_PATH="/sys/bus/hid/drivers/hid-razer"
DEVICE_PATH=""
declare -a DEVICES

WHITE="\xFF\xFF\xFF"
BLACK="\x00\x00\x00"
RED="\xFF\x00\x00"
ORANGE="\xFF\x75\x00"
YELLOW="\xFF\xFF\x00"
GREEN="\x00\xFF\x00"
BLUE="\x00\x00\xFF"
CYAN="\x00\xFF\xFF"
PURPLE="\xFF\x00\xFF"
COLOR='\033[0;31m'
NC='\033[0m' # No Color


if [[ ! -d "$DRIVER_PATH" ]]; then
    echo "driver is not loaded."
    exit 1
fi

# Find all available supported devices.
for d in "$DRIVER_PATH"/*
do
    if [[ $d == *:*:*\.* ]]; then
        DEVICES+=($(basename "$d"))
    fi
done

if [[ "${#DEVICES[@]}" -le "0" ]]; then
    echo "no supported Razer device attached."
    exit 1
elif [[ "${#DEVICES[@]}" -eq "1" ]]; then
    DEVICE_PATH="$DRIVER_PATH/${DEVICES[0]}"
else
    echo "Available devices:"

    i=1
    for d in ${DEVICES[@]}; do
        echo -n " $i) "
        cat "$DRIVER_PATH/$d/device_type" | tr -d '\n'
        echo " ($d)"

        i=$[$i +1]
    done

    read -p "Choose device [1]: " d
    d=${d:-1}
    d=$[$d -1]

    if [[ "$d" -lt "0" ]] || [[ "$d" -ge "${#DEVICES[@]}" ]]; then
        echo "invalid device path."
        exit 1
    fi

    DEVICE_PATH="$DRIVER_PATH/${DEVICES[$d]}"
fi

echo -n "Setting colors for device: "
cat "$DEVICE_PATH/device_type"

if [[ ! -e "$DEVICE_PATH/set_key_colors" ]]; then
    echo "device does not support custom color keys."
    exit 1
fi


ROWS=$(cat "$DEVICE_PATH/get_key_rows")
COLUMNS=$(cat "$DEVICE_PATH/get_key_columns")
NUM_COLORS=$(($ROWS * $COLUMNS))
COLORS=""
CUR_ROW=1
CUR_COLUMN=1
CUR_NUM_COLORS=1
LAST_COLOR="red"


function print_available_colors {
    echo -n "Available colors: "
    echo -e -n "\033[1;37mwhite[w]${NC} "
    echo -e -n "\033[1;30mblack[bl]${NC} "
    echo -e -n "\033[0;31mred[r]${NC} "
    echo -e -n "\033[1;31morange[o]${NC} "
    echo -e -n "\033[1;33myellow[y]${NC} "
    echo -e -n "\033[0;32mgreen[g]${NC} "
    echo -e -n "\033[0;34mblue[b]${NC} "
    echo -e -n "\033[1;36mcyan[c]${NC} "
    echo -e "\033[0;35mpurple[p]${NC}"
}

function reset_all_colors {
    colors=""

    for (( i=0; i<$NUM_COLORS; i++ ))
    do
        colors="$colors$BLACK"
    done

    echo -e -n "$colors" > "$DEVICE_PATH/set_key_colors"
}

function set_key_color {
    echo -e "\n${COLOR}Row:${NC} $CUR_ROW ${COLOR}Column:${NC} $CUR_COLUMN"
    print_available_colors

    while true; do
        while true; do
            read -p "Set color [$LAST_COLOR]: " color_name
            color_name=${color_name:-$LAST_COLOR}

            case $color_name in
                white|w)
                    color="$WHITE"
                    ;;
                black|bl)
                    color="$BLACK"
                    ;;
                red|r)
                    color="$RED"
                    ;;
                orange|o)
                    color="$ORANGE"
                    ;;
                yellow|y)
                    color="$YELLOW"
                    ;;
                green|g)
                    color="$GREEN"
                    ;;
                blue|b)
                    color="$BLUE"
                    ;;
                cyan|c)
                    color="$CYAN"
                    ;;
                purple|p)
                    color="$PURPLE"
                    ;;
                *)
                    echo "unknown color"
                    continue
            esac

            LAST_COLOR="$color_name"
            break
        done

        colors="$COLORS$color"

        # Fill all missing colors with a black color.
        for (( i=$CUR_NUM_COLORS; i<$NUM_COLORS; i++ ))
        do
            colors="$colors$BLACK"
        done

        # Preview the changes.
        echo -e -n "$colors" > "$DEVICE_PATH/set_key_colors"

        # Confirm
        while true; do
            read -p "Next color [Y/n]: " confirm
            if [[ "$confirm" == "y" ]] || [[ "$confirm" == "Y" ]] || [[ "$confirm" == "" ]]; then
                COLORS="$COLORS$color"
                return
            elif [[ "$confirm" == "n" ]] || [[ "$confirm" == "N" ]]; then
                break
            fi
        done
    done
}



reset_all_colors

for (( x=0; x<$NUM_COLORS; x++ ))
do
    set_key_color
    CUR_NUM_COLORS=$[$CUR_NUM_COLORS +1]
    CUR_COLUMN=$[$CUR_COLUMN +1]

    if [[ "$CUR_COLUMN" -gt "$COLUMNS" ]]; then
        CUR_COLUMN=1
        CUR_ROW=$[$CUR_ROW +1]
    fi
done


# Finaly set the colors.
echo -e "\n${COLOR}Final command:${NC}"
echo "echo -e -n \"$colors\" > \"$DEVICE_PATH/set_key_colors\""
echo -e -n "$colors" > "$DEVICE_PATH/set_key_colors"
